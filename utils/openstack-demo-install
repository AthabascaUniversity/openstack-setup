#!/bin/sh
# Install and Enable all OpenStack services on a single node,
# for testing/demonstration purposes.
#
# Copyright (C) 2012, Red Hat, Inc.
# PÃ¡draig Brady <pbrady@redhat.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

set -e # exit on error. This script is restartable

if [ $(id -u) -ne 0 ]; then
  echo 'Please run this as the root user' >&2
  exit 1
fi


echo "======= Installing/Updating packages ======"

# memcached is needed by swift
# qpid AMQP broker is needed by most services
# virtualization capabilities are needed by nova
yum -y install \
 qpid-cpp-server-daemon \
 @virtualization \
 memcached \
 openstack-nova openstack-glance openstack-keystone openstack-dashboard \
 openstack-swift\* openstack-quantum \
 openstack-utils virt-what

echo "======= Setting up the databases ======"

getpassword()
{
  password='x'
  until [ "$password" = "$rpassword" ]; do
    read -s -p "Enter a password for the '$1' user : " password; echo >&2
    read -s -p "Reenter password for the '$1' user : " rpassword; echo >&2
  done
  echo "$password"
}

ROOT_DB_PW=$(getpassword 'database root')

for APP in nova glance keystone; do
  openstack-db -y --init --service $APP --rootpw "$ROOT_DB_PW"
done

if virt-what | grep -q .; then
  # We're running in a VM so set nova-compute up appropriately
  echo '======= Configuring VM. Please wait =======' >&2
  fedora_ver="0$(sed -n 's/Fedora release \([0-9]*\).*/\1/p' /etc/issue)"
  openstack-config --set /etc/nova/nova.conf DEFAULT libvirt_type qemu
  if [ "$fedora_ver" -ge 16 ]; then
    setsebool -P virt_use_execmem on
  fi
  # Note if running on RHEL (derivatives) <= 6.3 then
  # You'll need to issue these commands
  #  ln -s /usr/libexec/qemu-kvm /usr/bin/qemu-system-x86_64
  #  service libvirtd restart
  # See https://bugzilla.redhat.com/show_bug.cgi?id=813735
fi

# TODO support volumes (maybe as an option due to size)
# Need to support setup on reboot also.
# When this is done, add 'volume' to the nova services below
# truncate -s20G /var/lib/nova/nova-volumes.img
# vgcreate nova-volumes $(sudo losetup --show -f /var/lib/nova/nova-volumes.img)

echo "======= Enabling the services ======"

for svc in qpidd libvirtd httpd; do
    chkconfig $svc on
done
for svc in api registry; do
    chkconfig openstack-glance-$svc on
done
for svc in api objectstore compute network scheduler cert; do
    chkconfig openstack-nova-$svc on
done

echo "======= Starting the services ======"

for svc in qpidd libvirtd httpd; do
    service $svc start
done
for svc in api registry; do
    service openstack-glance-$svc start
done
for svc in api objectstore compute network scheduler cert; do
    service openstack-nova-$svc start
done

echo "======= Setting up Keystone ======"

# Set up a keystonerc file with a generated admin token and various passwords
TOKEN=$(openssl rand -hex 10)
cat > ~/keystonerc <<EOF
export ADMIN_TOKEN=$TOKEN
export OS_USERNAME=admin
export OS_PASSWORD=verybadpass
export OS_TENANT_NAME=admin
export OS_AUTH_URL=http://127.0.0.1:5000/v2.0/
export SERVICE_TOKEN=$TOKEN
export SERVICE_ENDPOINT=http://127.0.0.1:35357/v2.0
EOF
. ~/keystonerc

# Set the administrative token in the config file
openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token $ADMIN_TOKEN

# Start and enable the Keystone service
service openstack-keystone start
chkconfig openstack-keystone on

# wait for the keystone service to start
tries=0
until keystone user-list >/dev/null 2>&1; do
  tries=$(($tries + 1))
  [ $tries -eq 10 ] && { keystone user-list; break; }
  sleep 1
done

# Create sample Tenants, Users and Roles
ADMIN_PASSWORD=$OS_PASSWORD SERVICE_PASSWORD=servicepass \
ENABLE_QUANTUM=1 ENABLE_SWIFT=1 openstack-keystone-sample-data

# Change nova configuration to use keystone
openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
if rpm -q openstack-nova-common-2012.1 >/dev/null 2>&1; then # essex
  openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_tenant_name service
  openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_user nova
  openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_password servicepass
else # >= folsom
  openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_tenant_name service
  openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_user nova
  openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_password servicepass
fi
for svc in api compute; do
    service openstack-nova-$svc restart
done

# Change glance configuration to use keystone
for svc in api registry; do
  openstack-config --set /etc/glance/glance-$svc.conf paste_deploy flavor keystone
  if rpm -q openstack-glance-2012.1 >/dev/null 2>&1; then # essex
    openstack-config --set /etc/glance/glance-$svc-paste.ini filter:authtoken admin_tenant_name service
    openstack-config --set /etc/glance/glance-$svc-paste.ini filter:authtoken admin_user glance
    openstack-config --set /etc/glance/glance-$svc-paste.ini filter:authtoken admin_password servicepass
  else # >= folsom
    openstack-config --set /etc/glance/glance-$svc.conf keystone_authtoken admin_tenant_name service
    openstack-config --set /etc/glance/glance-$svc.conf keystone_authtoken admin_user glance
    openstack-config --set /etc/glance/glance-$svc.conf keystone_authtoken admin_password servicepass
  fi
done
for svc in api registry; do
    service openstack-glance-$svc restart
done

# We can only setup Swift for packages that contain example config files
[ -e /etc/swift/proxy-server.conf ] && setup_swift

setup_swift()
{
  echo "======= Setting up Swift ======"

  # Add the swift endpoint
  SWIFTSERIVEID=$(keystone service-list | grep object-store | awk '{print $2}')
  keystone endpoint-create --service_id $SWIFTSERIVEID \
                           --publicurl   'http://127.0.0.1:8080/v1/AUTH_$(tenant_id)s' \
                           --adminurl    'http://127.0.0.1:8080/v1/AUTH_$(tenant_id)s' \
                           --internalurl 'http://127.0.0.1:8080/v1/AUTH_$(tenant_id)s'

  # edit default config
  openstack-config --set /etc/swift/proxy-server.conf filter:authtoken admin_tenant_name service
  openstack-config --set /etc/swift/proxy-server.conf filter:authtoken admin_user swift
  openstack-config --set /etc/swift/proxy-server.conf filter:authtoken admin_password servicepass
  openstack-config --set /etc/swift/swift.conf swift-hash swift_hash_path_suffix $(openssl rand -hex 10)

  # Create ringfiles and storage devices
  swift-ring-builder /etc/swift/account.builder create 12 3 1
  swift-ring-builder /etc/swift/container.builder create 12 3 1
  swift-ring-builder /etc/swift/object.builder create 12 3 1
  for zone in 1 2 3 4; do
    truncate /var/tmp/swift-storage-$zone --size 5G
    DEVICE=$(losetup --show -f  /var/tmp/swift-storage-$zone)
    mkfs.ext4 -I 1024 $DEVICE
    mkdir -p /srv/node/device$zone
    mount -o noatime,nodiratime,nobarrier,user_xattr $DEVICE /srv/node/device$zone
    swift-ring-builder /etc/swift/account.builder add z$zone-127.0.0.1:6002/device$zone 100
    swift-ring-builder /etc/swift/container.builder add z$zone-127.0.0.1:6001/device$zone 100
    swift-ring-builder /etc/swift/object.builder add z$zone-127.0.0.1:6000/device$zone 100
  done
  swift-ring-builder /etc/swift/account.builder rebalance
  swift-ring-builder /etc/swift/container.builder rebalance
  swift-ring-builder /etc/swift/object.builder rebalance

  # Make sure swift owns the ring file
  chown -R swift:swift /etc/swift/*gz /srv/node

  # Start the services
  service memcached start
  chkconfig memcached on
  service openstack-swift-proxy start
  chkconfig openstack-swift-proxy on
  for ringtype in account container object; do
    service openstack-swift-$ringtype start
    chkconfig openstack-swift-$ringtype on
    for service in replicator updater auditor; do
      if [ $ringtype != 'account' ] || [ $service != 'updater' ]; then
        swift-init $ringtype-$service start
      fi
    done
  done
}

echo "======= Running openstack-status ======"
openstack-status
