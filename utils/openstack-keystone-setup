#!/bin/sh
RCFILE=openstack-setup.rc

if [ -e ${RCFILE} ]; then
 . $RCFILE
fi

if [ -n "$DB_ROOT_PW" ]; then
 DBPW="--rootpw $DB_ROOT_PW"
fi

set_bootstrap_auth(){
    export SERVICE_ENDPOINT
    export SERVICE_TOKEN
    export -n OS_AUTH_URL
    export -n OS_PASSWORD
    export -n OS_USERNAME
    export -n OS_REGION_NAME
    export -n OS_TENANT_NAME
}

set_standard_auth(){
    export -n SERVICE_ENDPOINT
    export -n SERVICE_TOKEN
    export OS_AUTH_URL
    export OS_PASSWORD
    export OS_USERNAME
    export OS_REGION_NAME
    export OS_TENANT_NAME
}

save_runtime(){
    OUTFILE=$1
    {
     echo "export OS_AUTH_URL=${OS_AUTH_URL}"
     echo "export OS_PASSWORD=${OS_PASSWORD}"
     echo "export OS_USERNAME=${OS_USERNAME}"
     echo "export OS_REGION_NAME=${OS_REGION_NAME}"
     echo "export OS_TENANT_NAME=${OS_TENANT_NAME}"
     echo "OS_SERVICE_ENDPOINT=${OS_SERVICE_ENDPOINT}"
     echo "OS_SERVICE_TOKEN=${OS_SERVICE_TOKEN}"
     echo "OS_IDENTITY_API_VERSION=2.0"
    } > $OUTFILE
}

openstack-db -y --init --service keystone $DBPW

## May have to go to Horizon setup
# setsebool -P httpd_can_network_connect=on
# service httpd restart

## If I got things right - we need qpidd
for svc in qpidd ; do
        chkconfig $svc on
done
 
for svc in qpidd ; do
        service $svc start
done
 

openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token $SERVICE_TOKEN

service openstack-keystone status >/dev/null 2>&1 &&
  service openstack-keystone stop

# Start and enable the Keystone service
service openstack-keystone start
chkconfig openstack-keystone on

set_bootstrap_auth

tries=0
until keystone user-list >/dev/null 2>&1; do
  tries=$(($tries + 1))
  [ $tries -eq 10 ] && { keystone user-list; break; }
  sleep 1
done

##XXX fix openstack-keystone-setup-data ...
ADMIN_PASSWORD=$OS_PASSWORD SERVICE_PASSWORD=${KEYSTONE_SERVICE_PASSWD} \
  ENABLE_SWIFT=${ENABLE_SWIFT} openstack-keystone-setup-data


if [ "$ENABLE_CINDER" = "1" ] ; then
  # TODO: Move this to openstack-keystone-sample-data

  get_id () { echo $("$@" | grep ' id ' | awk '{print $4}'); }
  ADMIN_PASSWORD=$OS_PASSWORD
  SERVICE_HOST=127.0.0.1
  SERVICE_PASSWORD=$CINDER_SERVICE_PASSWD
  SERVICE_TENANT=$(keystone tenant-list | grep service | awk '{print $2}')
  ADMIN_ROLE=$(keystone role-list | grep ' admin ' | awk '{print $2}')

  CINDER_USER=$(get_id keystone user-create --name=cinder \
                                            --pass="$SERVICE_PASSWORD" \
                                            --tenant_id $SERVICE_TENANT \
                                            --email=cinder@example.com)
  keystone user-role-add --tenant_id $SERVICE_TENANT \
                         --user_id $CINDER_USER \
                         --role_id $ADMIN_ROLE
  CINDER_SERVICE=$(get_id keystone service-create \
      --name=cinder \
      --type=volume \
      --description="Cinder Service")
  keystone endpoint-create \
      --region $OS_REGION_NAME \
      --service_id $CINDER_SERVICE \
      --publicurl "http://$SERVICE_HOST:8776/v1/\$(tenant_id)s" \
      --adminurl "http://$SERVICE_HOST:8776/v1/\$(tenant_id)s" \
      --internalurl "http://$SERVICE_HOST:8776/v1/\$(tenant_id)s"
fi

RUNTIME_RC=${RUNTIME_RC:-openstack-runtime.rc}
save_runtime $RUNTIME_RC
