#!/bin/sh
set_bootstrap_auth(){
    export SERVICE_ENDPOINT
    export SERVICE_TOKEN
    export -n OS_AUTH_URL
    export -n OS_PASSWORD
    export -n OS_USERNAME
    export -n OS_REGION_NAME
    export -n OS_TENANT_NAME
    export -n OS_SERVICE_ENDPOINT
    export -n OS_SERVICE_TOKEN
}

set_standard_auth(){
    export -n SERVICE_ENDPOINT
    export -n SERVICE_TOKEN
    export OS_AUTH_URL
    export OS_PASSWORD
    export OS_USERNAME
    export OS_REGION_NAME
    export OS_TENANT_NAME
    export OS_SERVICE_ENDPOINT
    export OS_SERVICE_TOKEN
}

save_runtime(){
    OUTFILE=$1
    ## This has to be changed along with "restore_ps1" function
    ## that mangles PS1 based on rules here
    {
     echo "export OS_AUTH_URL=${OS_AUTH_URL}"
     echo "export OS_PASSWORD=${OS_PASSWORD}"
     echo "export OS_USERNAME=${OS_USERNAME}"
     echo "export OS_REGION_NAME=${OS_REGION_NAME}"
     echo "export OS_TENANT_NAME=${OS_TENANT_NAME}"
     echo "OS_SERVICE_ENDPOINT=${OS_SERVICE_ENDPOINT}"
     echo "OS_SERVICE_TOKEN=${OS_SERVICE_TOKEN}"
     echo "OS_IDENTITY_API_VERSION=2.0"
     echo 'export PROMPT_COMMAND='\''[ -n "${OS_USERNAME}${OS_REGION_NAME}${OS_REGION_NAME}" ] && echo "=== OpenStack ==> " /${OS_USERNAME}@${OS_REGION_NAME}:${OS_TENANT_NAME}/'\'
    } > $OUTFILE
}

restore_ps1(){
     OLD_PS1_PREFIX="/${OS_USERNAME}@${OS_REGION_NAME}:${OS_TENANT_NAME}/ "
     PS1=${PS1##*${OLD_PS1_PREFIX}}
     export PS1
}


cleanup_os_env(){
    unset SERVICE_ENDPOINT
    unset SERVICE_TOKEN
    unset OS_AUTH_URL
    unset OS_PASSWORD
    unset OS_USERNAME
    unset OS_REGION_NAME
    unset OS_TENANT_NAME
    unset OS_SERVICE_ENDPOINT
    unset OS_SERVICE_TOKEN
    unset PROMPT_COMMAND
}

dump_os_env(){
    echo "===> Exports"
    export
    echo "===> OpenStack Vars"
    echo "OS_AUTH_URL=${OS_AUTH_URL}"
    echo "OS_PASSWORD=${OS_PASSWORD}"
    echo "OS_USERNAME=${OS_USERNAME}"
    echo "OS_REGION_NAME=${OS_REGION_NAME}"
    echo "OS_TENANT_NAME=${OS_TENANT_NAME}"
    echo "OS_SERVICE_ENDPOINT=${OS_SERVICE_ENDPOINT}"
    echo "OS_SERVICE_TOKEN=${OS_SERVICE_TOKEN}"
    echo "OS_IDENTITY_API_VERSION=2.0"
    echo "SERVICE_ENDPOINT=$SERVICE_ENDPOINT"
    echo "SERVICE_TOKEN=$SERVICE_TOKEN"
}

detect_distro(){
    if rpm --quiet -q fedora-release ; then
       DISTRO="f"
       DISTRO_VER_STR=$(rpm --qf '%{version}:%{release}\n' -q fedora-release)
       DISTRO_VER=${DISTRO_VER_STR%:*}
       DISTRO_REL=${DISTRO_VER_STR#:}
    fi
    if rpm --quiet -q redhat-release ; then
       DISTRO="el"
       DISTRO_VER_STR=$(rpm --qf '%{release}\n' -q redhat-release)
    fi
    if rpm --quiet -q redhat-release-server ; then
       DISTRO="el"
       DISTRO_VER_STR=$(rpm --qf '%{release}\n' -q redhat-release-server)
    fi
    if [ "$DISTRO" = "el" ] ; then
       DISTRO_VER=${DISTRO_VER_STR%%.*}
       DISTRO_REL_LONG=${DISTRO_VER_STR#*.}
       DISTRO_REL=${DISTRO_REL_LONG%%.*}
    fi
}
